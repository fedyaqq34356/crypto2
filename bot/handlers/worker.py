from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from bot.keyboards.reply import get_worker_menu
from bot.keyboards.inline import get_channel_keyboard
from bot.services.user import get_user_status, get_user_stats, get_user_assigned_admin, get_admin_username
from bot.models.database import init_db, Payment
from bot.utils.formatting import format_stats
from config import load_config
from sqlalchemy.sql import func
from sqlalchemy import desc
import logging
import random
import string

router = Router()
logger = logging.getLogger(__name__)

router = Router()
logger = logging.getLogger(__name__)

async def check_user_access(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        return await get_user_status(user_id) == "active"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞: {e}")
        return False



@router.message(F.text == "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if not await check_user_access(message.from_user.id):
            await message.answer("–¢–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
            return
            
        stats = await get_user_stats(message.from_user.id)
        stats_text = (
            f"{format_stats(stats)}"
        )
        
        await message.answer(
            stats_text,
            reply_markup=get_worker_menu(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_stats: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

@router.message(F.text == "–¢–æ–ø –Ω–µ–¥–µ–ª–∏")
async def show_top_week(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ø–∞ –Ω–µ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç"""
    try:
        if not await check_user_access(message.from_user.id):
            await message.answer("–¢–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ —Ç–æ–ø—É.")
            return
            
        config = load_config()
        Session = await init_db(config)
        with Session() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ –≤—ã–ø–ª–∞—Ç–∞–º –∑–∞ –Ω–µ–¥–µ–ª—é
            from datetime import datetime, timedelta
            week_ago = datetime.utcnow() - timedelta(days=7)
            
            top_managers = session.query(
                Payment.manager_name,
                func.sum(Payment.manager_profit).label('total_profit'),
                func.count(Payment.id).label('payment_count')
            ).filter(
                Payment.created_at >= week_ago
            ).group_by(Payment.manager_name).order_by(desc('total_profit')).limit(10).all()

        if not top_managers:
            await message.answer("–¢–æ–ø –Ω–µ–¥–µ–ª–∏ –ø—É—Å—Ç.\n–ï—â–µ –Ω–µ—Ç –≤—ã–ø–ª–∞—Ç –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é.")
            return

        top_text = "üèÜ –¢–æ–ø –Ω–µ–¥–µ–ª–∏ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º:\n\n"
        for i, (manager_name, total_profit, count) in enumerate(top_managers, 1):
            top_text += f"{i}. **{manager_name}**: {total_profit}$ | –ø—Ä–æ—Ñ–∏—Ç–æ–≤: {count}\n"

        await message.answer(top_text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_top_week: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ –Ω–µ–¥–µ–ª–∏.")



@router.message(F.text == "–í—ã–ø–ª–∞—Ç—ã")
async def show_payments(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–ø–ª–∞—Ç–∞—Ö"""
    try:
        if not await check_user_access(message.from_user.id):
            await message.answer("–¢–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ –≤—ã–ø–ª–∞—Ç–∞–º.")
            return
            
        config = load_config()
        payments_text = (
            f"üí∞ –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Ñ–∏—Ç–æ–≤ –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ –≤—ã–ø–ª–∞—Ç.\n\n"
            f"üìä –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–ø–∞ –Ω–µ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–¢–æ–ø –Ω–µ–¥–µ–ª–∏'"
        )
        
        await message.answer(
            payments_text,
            reply_markup=get_channel_keyboard(config.payment_channel_url),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_payments: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–ø–ª–∞—Ç–∞—Ö.")

@router.message(F.text == "–ö–∞–Ω–∞–ª")
async def show_channel(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–∞—Ö"""
    try:
        if not await check_user_access(message.from_user.id):
            await message.answer("–¢–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª–∞–º.")
            return
            
        config = load_config()
        channel_text = (
            f"–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ [{config.main_channel}]({config.main_channel}), "
            f"—á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞.\n"
            f"–ù–∞ —Å–ª—É—á–∞–π –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞, "
            f"—Ä–µ–∑–µ—Ä–≤–Ω—ã–º –±—É–¥–µ—Ç [{config.payment_channel_url}]({config.payment_channel_url})."
        )
        
        await message.answer(
            channel_text,
            reply_markup=get_channel_keyboard(config.main_channel),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_channel: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–∞—Ö.")



@router.message(F.text == "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–≤–∞–π—Ç")
async def generate_user_utm(message: Message):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è UTM —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if not await check_user_access(message.from_user.id):
            await message.answer("–¢–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∏.")
            return
        
        assigned_admin = await get_user_assigned_admin(message.from_user.id)
        if not assigned_admin:
            await message.answer("–û—à–∏–±–∫–∞: –∫ –≤–∞–º –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π UTM –∫–æ–¥ –∏–∑ 12 —Å–∏–º–≤–æ–ª–æ–≤
        utm_code = ''.join(random.choices(string.ascii_letters + string.digits, k=12))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ UTM –∫ –∞–¥–º–∏–Ω—É (–Ω–µ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!)
        config = load_config()
        config.utm_admin_mapping[utm_code] = assigned_admin
        
        bot_username = (await message.bot.get_me()).username
        utm_link = f"https://t.me/{bot_username}?start={utm_code}"
        
        admin_username = await get_admin_username(assigned_admin)
        utm_text = (
            f"üîó –í–∞—à–∞ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞:\n\n"
            f"`{utm_link}`\n\n"
            f"üìù –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∞–¥–º–∏–Ω—É @{admin_username}."
        )
        
        await message.answer(utm_text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ UTM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏.")




@router.message(F.text == "–û–±–º–µ–Ω–Ω–∏–∫")
async def exchange_redirect(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±–º–µ–Ω–∞"""
    try:
        if not await check_user_access(message.from_user.id):
            await message.answer("–¢–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±–º–µ–Ω–Ω–∏–∫.")
            return
            
        from bot.handlers.exchange import start_exchange
        await start_exchange(message, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ exchange_redirect: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±–º–µ–Ω–∞.")


@router.message(F.text == "–ú–∞–Ω—É–∞–ª—ã")
async def show_manuals(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞–Ω—É–∞–ª–æ–≤"""
    try:
        if not await check_user_access(message.from_user.id):
            await message.answer("–¢–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ –º–∞–Ω—É–∞–ª–∞–º.")
            return
            
        config = load_config()
        assigned_admin = await get_user_assigned_admin(message.from_user.id)
        admin_username = await get_admin_username(assigned_admin) if assigned_admin else "–∞–¥–º–∏–Ω"
        
        manuals_text = (
            f"–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–∞ –ø–æ –Ω–∞—à–µ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é:\n\n"
            f"–ß–µ–º –∑–∞–Ω–∏–º–∞–µ–º—Å—è:\n"
            f"[–ú–∞–Ω—É–∞–ª –ø–æ Electrum (–î–ª—è –ü–ö)]({config.electrum_manual})\n"
            f"[–ú–∞–Ω—É–∞–ª Bluewallet (Android/iOS)]({config.bluewallet_manual})\n"
            f"[–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞]({config.manager_manual})\n\n"
            f"–ï—Å–ª–∏ —Ç—ã –∏–∑—É—á–∏–ª –º–∞–Ω—É–∞–ª—ã –∏ –æ—Å–≤–æ–∏–ª –æ—Ç–º–µ–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –º–µ–∂–¥—É —Å–≤–æ–∏–º–∏ –∫–æ—à–µ–ª—å–∫–∞–º–∏ - –∑–Ω–∞—á–∏—Ç, —Ç—ã –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∞–∫—Ç–∏–∫–µ\n\n"
            f"–ü–∏—à–∏ @{admin_username}, —á—Ç–æ–±—ã:\n"
            f"‚Ä¢ –ø–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Ç–µ–ª–µ–≥–∏\n"
            f"‚Ä¢ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫\n"
            f"‚Ä¢ –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ –∏ –Ω–∞—á–∞—Ç—å –≤–æ—Ä–∫"
        )
        
        await message.answer(manuals_text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_manuals: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞–Ω—É–∞–ª–æ–≤.")
