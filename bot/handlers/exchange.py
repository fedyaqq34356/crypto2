# bot/handlers/exchange.py
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from bot.models.database import Exchange, init_db
from bot.services.user import get_user_status, get_user_assigned_admin, get_admin_username, has_active_exchange
from bot.keyboards.inline import (
    get_exchange_keyboard, 
    get_admin_exchange_keyboard, 
    get_worker_confirmation_keyboard,
    get_usdt_wallet_keyboard
)
from bot.services.exchange_wallet import generate_usdt_wallet, format_usdt_wallet_message
from config import load_config
import logging
import re
import random
import string




router = Router()
logger = logging.getLogger(__name__)

class ExchangeForm(StatesGroup):
    amount = State()

class AdminExchangeForm(StatesGroup):
    waiting_for_amount = State()
    waiting_for_rate = State()
    waiting_for_btc_address = State()
    processing_transaction = State()

@router.message(F.text == "–û–±–º–µ–Ω–Ω–∏–∫")
async def start_exchange(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–º–µ–Ω–∞"""
    try:
        if await get_user_status(message.from_user.id) != "active":
            await message.answer("–¢–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Ä–∞–∑–º–µ—â–∞—Ç—å –∑–∞–∫–∞–∑—ã.")
            return
            
        await message.answer(
            "–£–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC –Ω–∞ —Ç–≤–æ–µ–º –∫–æ—à–µ–ª—å–∫–µ, –¥–æ—Å—Ç—É–ø–Ω–æ–µ –¥–ª—è –æ–±–º–µ–Ω–∞."
        )
        await state.set_state(ExchangeForm.amount)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_exchange: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")

@router.message(ExchangeForm.amount)
async def process_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã BTC"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±–º–µ–Ω—ã
        if await has_active_exchange(message.from_user.id):
            await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ–±–º–µ–Ω. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
            await state.clear()
            return
            
        cleaned_text = re.sub(r'[^\d.,]', '', message.text.replace(',', '.'))
        
        if not cleaned_text:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.5 –∏–ª–∏ 1.25).")
            return
            
        amount = float(cleaned_text)
        
        if amount <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            return
            
        if amount > 100:  
            await message.answer("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Å—É–º–º–∞. –ú–∞–∫—Å–∏–º—É–º 100 BTC –∑–∞ –æ–¥–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.")
            return
        
        config = load_config()
        Session = await init_db(config)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
        assigned_admin = await get_user_assigned_admin(message.from_user.id)
        
        if not assigned_admin:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –∫ –≤–∞–º –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ."
            )
            await state.clear()
            return
        
        try:
            with Session() as session:
                exchange = Exchange(
                    user_id=message.from_user.id, 
                    amount_btc=amount,
                    status="pending",
                    assigned_admin=assigned_admin
                )
                session.add(exchange)
                session.commit()
                exchange_id = exchange.id
                
            from bot.templates.instructions import WORKER_ORDER_CREATED
            await message.answer(
                WORKER_ORDER_CREATED.format(manager_manual=config.manager_manual),
                parse_mode="Markdown"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º username –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
            admin_username = await get_admin_username(assigned_admin)
            worker_username = message.from_user.username or f"User{message.from_user.id}"
            
            admin_message = (
                f"–°—Ç–∞—Ç—É—Å: Pending\n"
                f"–í–æ—Ä–∫–µ—Ä: @{message.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"ID: {message.from_user.id}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC: {amount}\n"
                f"–ê–¥–º–∏–Ω: @{admin_username}\n"
                f"–í–æ—Ä–∫–µ—Ä –æ–∂–∏–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞."
            )
            
            from bot.keyboards.inline import get_exchange_keyboard_with_admin
            keyboard = get_exchange_keyboard_with_admin(exchange_id, assigned_admin) if assigned_admin else get_exchange_keyboard(exchange_id)
            
            await message.bot.send_message(
                config.admin_group,
                admin_message,
                reply_markup=keyboard
            )
            
        except Exception as db_error:
            logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ process_amount: {db_error}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
            
        await state.clear()
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.5 –∏–ª–∏ 1.25).")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_amount: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞.")
        await state.clear()



@router.callback_query(F.data == "generate_utm")
async def admin_generate_utm(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è UTM —Å—Å—ã–ª–∫–∏ –∞–¥–º–∏–Ω–æ–º —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏"""
    try:
        config = load_config()
        
        if callback.from_user.id not in config.admin_ids:
            await callback.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å UTM —Å—Å—ã–ª–∫–∏.")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π UTM –∫–æ–¥ –∏–∑ 12 —Å–∏–º–≤–æ–ª–æ–≤
        utm_code = ''.join(random.choices(string.ascii_letters + string.digits, k=12))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ UTM –∫ –∞–¥–º–∏–Ω—É
        config.utm_admin_mapping[utm_code] = callback.from_user.id
        
        bot_username = (await callback.bot.get_me()).username
        utm_link = f"https://t.me/{bot_username}?start={utm_code}"
        
        await callback.message.answer(
            f"üîó –í–∞—à–∞ UTM —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–æ–≤:\n\n"
            f"`{utm_link}`\n\n"
            f"üìù –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–µ—Ä–µ—à–µ–¥—à–∏–µ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ, "
            f"–±—É–¥—É—Ç –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –≤–∞–º.",
            parse_mode="Markdown"
        )
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ UTM: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏.")

@router.callback_query(F.data.startswith("start_exchange_"))
async def take_exchange_order(callback: CallbackQuery, state: FSMContext):
    """–ê–¥–º–∏–Ω –±–µ—Ä–µ—Ç –æ—Ä–¥–µ—Ä - —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∞–¥–º–∏–Ω"""
    try:
        parts = callback.data.split("_")
        exchange_id = int(parts[2])
        assigned_admin = int(parts[3]) if len(parts) > 3 else None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if assigned_admin and callback.from_user.id != assigned_admin:
            await callback.answer("–≠—Ç–æ—Ç –æ–±–º–µ–Ω –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω.")
            return
            
        config = load_config()
        Session = await init_db(config)
        
        with Session() as session:
            exchange = session.query(Exchange).filter_by(id=exchange_id).first()
            
            if not exchange:
                await callback.answer("–û–±–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
                
            if exchange.status != "pending":
                await callback.answer("–≠—Ç–æ—Ç –æ–±–º–µ–Ω —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.")
                return
                
            exchange.status = f"–ü—Ä–∏–Ω—è—Ç–æ [{callback.from_user.username or '–ê–¥–º–∏–Ω'}]"
            exchange.admin_id = callback.from_user.id
            session.commit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–∫—Ä—ã—Ç–∏—è
            from bot.keyboards.inline import get_close_exchange_keyboard
            close_keyboard = get_close_exchange_keyboard(exchange_id, callback.from_user.id)
            
            await callback.message.edit_text(
                f"{callback.message.text}\n\n–°—Ç–∞—Ç—É—Å: –ü—Ä–∏–Ω—è—Ç–æ [{callback.from_user.username or '–ê–¥–º–∏–Ω'}]",
                reply_markup=close_keyboard
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä—É
            from bot.templates.instructions import WORKER_CLIENT_FOUND
            worker_message = WORKER_CLIENT_FOUND.format(manager_manual=config.manager_manual)
            
            await callback.bot.send_message(
                exchange.user_id,
                worker_message,
                parse_mode="Markdown"
            )
            
        await callback.answer("–û—Ä–¥–µ—Ä –ø—Ä–∏–Ω—è—Ç.")
        
    except (ValueError, IndexError):
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ take_exchange_order: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–º–µ–Ω–∞.")
        
    except (ValueError, IndexError):
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ take_exchange_order: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–º–µ–Ω–∞.")

@router.callback_query(F.data.startswith("admin_start_exchange_"))
async def admin_start_exchange(callback: CallbackQuery, state: FSMContext):
    """–ê–¥–º–∏–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–±–º–µ–Ω"""
    try:
        exchange_id = int(callback.data.split("_")[3])
        config = load_config()
        Session = await init_db(config)
        
        with Session() as session:
            exchange = session.query(Exchange).filter_by(id=exchange_id).first()
            
            if not exchange or exchange.admin_id != callback.from_user.id:
                await callback.answer("–û–±–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.")
                return
                
            exchange.status = "in_progress"
            session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ—Ä–∫–µ—Ä–∞ —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω
            from bot.templates.instructions import WORKER_CLIENT_FOUND
            worker_message = WORKER_CLIENT_FOUND.format(manager_manual=config.manager_manual)
            
            await callback.bot.send_message(
                exchange.user_id,
                worker_message,
                parse_mode="Markdown"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
            from bot.templates.instructions import ADMIN_EXCHANGE_STARTED
            admin_update_text = ADMIN_EXCHANGE_STARTED.format(amount=exchange.amount_btc)
            
            await callback.message.edit_text(
                admin_update_text,
                reply_markup=get_worker_confirmation_keyboard(exchange_id)
            )
            
        await callback.answer("–û–±–º–µ–Ω –Ω–∞—á–∞—Ç!")
        
    except (ValueError, IndexError):
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_start_exchange: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ–±–º–µ–Ω–∞.")

@router.callback_query(F.data.startswith("close_exchange_"))
async def close_exchange(callback: CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–±–º–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º"""
    try:
        parts = callback.data.split("_")
        exchange_id = int(parts[2])
        assigned_admin = int(parts[3]) if len(parts) > 3 else None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if assigned_admin and callback.from_user.id != assigned_admin:
            await callback.answer("–≠—Ç–æ—Ç –æ–±–º–µ–Ω –º–æ–∂–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω.")
            return
            
        config = load_config()
        Session = await init_db(config)
        
        with Session() as session:
            exchange = session.query(Exchange).filter_by(id=exchange_id).first()
            
            if not exchange:
                await callback.answer("–û–±–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
                
            exchange.status = "completed"
            session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ—Ä–∫–µ—Ä–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            await callback.bot.send_message(
                exchange.user_id,
                "–í–∞—à –æ–±–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –æ—Ä–¥–µ—Ä—ã."
            )
            
            await callback.message.edit_text(
                f"{callback.message.text}\n\n‚úÖ –û–±–º–µ–Ω –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{callback.from_user.username}"
            )
            
        await callback.answer("–û–±–º–µ–Ω –∑–∞–∫—Ä—ã—Ç!")
        
    except (ValueError, IndexError):
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ close_exchange: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–±–º–µ–Ω–∞.")


@router.callback_query(F.data.startswith("confirm_transaction_"))
async def confirm_transaction(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    try:
        exchange_id = int(callback.data.split("_")[2])
        config = load_config()
        Session = await init_db(config)
        
        with Session() as session:
            exchange = session.query(Exchange).filter_by(id=exchange_id).first()
            
            if not exchange or exchange.admin_id != callback.from_user.id:
                await callback.answer("–û–±–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.")
                return
                
            exchange.status = "transaction_sent"
            session.commit()
            
            # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤–æ—Ä–∫–µ—Ä—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            from bot.templates.instructions import WORKER_TRANSACTION_SENT
            
            await callback.bot.send_message(
                exchange.user_id,
                WORKER_TRANSACTION_SENT,
                reply_markup=get_usdt_wallet_keyboard(exchange_id)
            )
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            admin_notification = (
                f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.\n"
                f"–í–æ—Ä–∫–µ—Ä –ø–æ–ª—É—á–∏–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –æ–±–º–µ–Ω–∞.\n\n"
                f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: [–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏]({config.manager_manual})"
            )
            
            await callback.message.edit_text(
                admin_notification,
                parse_mode="Markdown"
            )
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –≥—Ä—É–ø–ø—É
            from bot.templates.instructions import ADMIN_GROUP_TRANSACTION_PROCESSING
            group_notification = ADMIN_GROUP_TRANSACTION_PROCESSING.format(
                admin_username=callback.from_user.username or "–ê–¥–º–∏–Ω",
                worker_username=await get_worker_username(exchange.user_id),
                amount=exchange.amount_btc,
                manager_manual=config.manager_manual
            )
            
            await callback.bot.send_message(
                config.admin_group,
                group_notification
            )
            
        await callback.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
        
    except (ValueError, IndexError):
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_transaction: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")

@router.message(F.text & ~F.text.startswith('/') & ~F.text.in_(['Place Order', '–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–¢–æ–ø –Ω–µ–¥–µ–ª–∏', '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏', '–ö–∞–Ω–∞–ª', '–ö–æ–º–∞–Ω–¥—ã', '–ú–æ–∏ –∫–æ—à–µ–ª—å–∫–∏', '–í—ã–ø–ª–∞—Ç—ã', '–ò–Ω–≤–∞–π—Ç', 'Admin Menu']))
async def handle_exchange_messages(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±–º–µ–Ω–∞"""
    try:
        config = load_config()
        Session = await init_db(config)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –æ–±–º–µ–Ω–µ
        if message.from_user.id in config.admin_ids:
            await admin_message_to_worker(message)
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—Ä–∫–µ—Ä–æ–º –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –æ–±–º–µ–Ω–µ  
        with Session() as session:
            exchange = session.query(Exchange).filter_by(
                user_id=message.from_user.id,
                status="in_progress"
            ).first()
            
            if exchange:
                await worker_message_to_admin(message)
                return
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_exchange_messages: {e}")

async def admin_message_to_worker(message: Message):
    """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∞ –∫ –≤–æ—Ä–∫–µ—Ä—É"""
    try:
        config = load_config()
        Session = await init_db(config)
        
        with Session() as session:
            # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π –æ–±–º–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∞
            exchange = session.query(Exchange).filter_by(
                admin_id=message.from_user.id,
                status="in_progress"
            ).first()
            
            if exchange:
                await message.bot.send_message(
                    exchange.user_id,
                    f"–ö–ª–∏–µ–Ω—Ç: {message.text}"
                )
                await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ—Ä–∫–µ—Ä—É")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_message_to_worker: {e}")

async def worker_message_to_admin(message: Message):
    """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤–æ—Ä–∫–µ—Ä–∞ –∫ –∞–¥–º–∏–Ω—É"""
    try:
        config = load_config()
        Session = await init_db(config)
        
        with Session() as session:
            # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π –æ–±–º–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
            exchange = session.query(Exchange).filter_by(
                user_id=message.from_user.id,
                status="in_progress"
            ).first()
            
            if exchange and exchange.admin_id:
                await message.bot.send_message(
                    exchange.admin_id,
                    f"–í–æ—Ä–∫–µ—Ä: {message.text}"
                )
                await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ worker_message_to_admin: {e}")

@router.callback_query(F.data.startswith("generate_usdt_"))
async def generate_exchange_usdt_wallet(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è USDT –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –æ–±–º–µ–Ω–∞"""
    try:
        exchange_id = int(callback.data.split("_")[2])
        config = load_config()
        Session = await init_db(config)
        
        with Session() as session:
            exchange = session.query(Exchange).filter_by(id=exchange_id).first()
            
            if not exchange:
                await callback.answer("–û–±–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if exchange.user_id != callback.from_user.id and exchange.admin_id != callback.from_user.id:
                await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –æ–±–º–µ–Ω—É.")
                return
                
            wallet = generate_usdt_wallet()
            wallet_message = format_usdt_wallet_message(wallet)
            
            await callback.message.answer(
                wallet_message,
                parse_mode="Markdown"
            )
            
            # –ï—Å–ª–∏ —ç—Ç–æ –≤–æ—Ä–∫–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –∞–¥–º–∏–Ω—É
            if exchange.user_id == callback.from_user.id and exchange.admin_id:
                admin_notification = (
                    f"–í–æ—Ä–∫–µ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª USDT –∫–æ—à–µ–ª–µ–∫:\n\n"
                    f"ERC20: `{wallet['erc20']}`\n"
                    f"TRC20: `{wallet['trc20']}`"
                )
                
                await callback.bot.send_message(
                    exchange.admin_id,
                    admin_notification,
                    parse_mode="Markdown"
                )
            
        await callback.answer("USDT –∫–æ—à–µ–ª–µ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
        
    except (ValueError, IndexError):
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ generate_exchange_usdt_wallet: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞.")

async def get_worker_username(user_id: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ—Ä–∫–µ—Ä–∞"""
    try:
        config = load_config()
        Session = await init_db(config)
        
        with Session() as session:
            from bot.models.database import User
            user = session.query(User).filter_by(telegram_id=user_id).first()
            return user.username if user and user.username else f"User{user_id}"
    except Exception:
        return f"User{user_id}"
