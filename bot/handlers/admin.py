from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.keyboards.inline import get_admin_menu, get_channel_keyboard
from bot.services.user import get_user_status, get_user_list, get_user_info, update_user_status
from bot.services.stats import get_admin_workers_stats
from bot.models.database import init_db, User, Payment
from config import load_config
from datetime import datetime
import logging
from sqlalchemy.sql import func

router = Router()
logger = logging.getLogger(__name__)

class PaymentForm(StatesGroup):
    manager_name = State()
    payment_amount = State()
    tx_hash = State()



async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        config = load_config()
        return user_id in config.admin_ids or await get_user_status(user_id) == "admin"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False

@router.message(F.text == "Admin Menu")
async def admin_menu(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    try:
        if not await is_admin(message.from_user.id):
            await message.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return
        await message.answer("–ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=get_admin_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_menu: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é.")

# –ó–∞–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é manage_users –≤ admin.py:

@router.callback_query(F.data.startswith("manage_users"))
async def manage_users(callback: CallbackQuery, state: FSMContext):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π"""
    try:
        if not await is_admin(callback.from_user.id):
            await callback.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        parts = callback.data.split("_")
        if len(parts) > 2 and parts[2].isdigit():
            page = int(parts[2])
        else:
            page = 1
            
        per_page = 5
        admin_id = callback.from_user.id

        config = load_config()
        Session = await init_db(config)
        with Session() as session:
            users = session.query(User).filter_by(assigned_admin=admin_id).order_by(User.registration_date.desc()).offset((page - 1) * per_page).limit(per_page).all()
            total_users = session.query(User).filter_by(assigned_admin=admin_id).count()

        if not users:
            await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        for user in users:
            user_text = (
                f"ID: {user.telegram_id}\n"
                f"Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"Status: {user.status}\n"
                f"Registration date: {user.registration_date.strftime('%Y-%m-%d %H:%M') if user.registration_date else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"Profit total: {user.profit_total or 0}$"
            )
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block_user_{user.telegram_id}")]
            ])
            await callback.message.answer(user_text, reply_markup=keyboard)

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        total_pages = (total_users + per_page - 1) // per_page
        pagination_buttons = []
        if page > 1:
            pagination_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"manage_users_{page-1}"))
        if page < total_pages:
            pagination_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"manage_users_{page+1}"))

        if pagination_buttons:
            await callback.message.answer(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}", reply_markup=InlineKeyboardMarkup(inline_keyboard=[pagination_buttons]))

        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ manage_users: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

# –í —Ñ–∞–π–ª–µ admin.py –∑–∞–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é show_my_workers:
@router.message(F.text == "My Workers")
async def show_my_workers(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–æ—Ä–∫–µ—Ä–æ–≤ –∞–¥–º–∏–Ω–∞ —Å –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –≤—ã–ø–ª–∞—Ç–∞–º"""
    try:
        config = load_config()
        
        if message.from_user.id not in config.admin_ids:
            await message.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return
        
        Session = await init_db(config)
        with Session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ —ç—Ç–æ–º—É –∞–¥–º–∏–Ω—É
            workers = session.query(User).filter_by(
                assigned_admin=message.from_user.id,
                status="active"
            ).all()
            
            if not workers:
                await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—ã–ø–ª–∞—Ç–∞–º –∑–∞ –Ω–µ–¥–µ–ª—é
            from datetime import datetime, timedelta
            week_ago = datetime.utcnow() - timedelta(days=7)
            
            total_profit = 0
            week_profit = 0
            
            workers_text = f"üë• –í–∞—à–∏ –≤–æ—Ä–∫–µ—Ä—ã ({len(workers)} —á–µ–ª.)\n\n"
            
            for worker in workers:
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏—Ç –≤–æ—Ä–∫–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –≤—ã–ø–ª–∞—Ç
                worker_payments = session.query(func.sum(Payment.manager_profit)).filter(
                    Payment.manager_name == (worker.username or f"User{worker.telegram_id}")
                ).scalar() or 0
                
                week_payments = session.query(func.sum(Payment.manager_profit)).filter(
                    Payment.manager_name == (worker.username or f"User{worker.telegram_id}"),
                    Payment.created_at >= week_ago
                ).scalar() or 0
                
                total_profit += worker_payments
                week_profit += week_payments
                
                workers_text += (
                    f"‚Ä¢ @{worker.username or f'User{worker.telegram_id}'}: "
                    f"{worker_payments}$ (–Ω–µ–¥–µ–ª—è: {week_payments}$)\n"
                )
            
            workers_text = (
                f"üë• –í–∞—à–∏ –≤–æ—Ä–∫–µ—Ä—ã ({len(workers)} —á–µ–ª.)\n\n"
                f"üí∞ –û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {total_profit}$\n"
                f"üìä –ü—Ä–æ—Ñ–∏—Ç –∑–∞ –Ω–µ–¥–µ–ª—é: {week_profit}$\n\n"
                f"üë§ –°–ø–∏—Å–æ–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤:\n" + workers_text.split("üë§ –°–ø–∏—Å–æ–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤:\n")[0] if "üë§ –°–ø–∏—Å–æ–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤:\n" in workers_text else workers_text
            )
        
        await message.answer(workers_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_my_workers: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤.")

@router.callback_query(F.data == "admin_group")
async def admin_group(callback: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—ã"""
    try:
        if not await is_admin(callback.from_user.id):
            await callback.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return
            
        config = load_config()
        await callback.message.answer(
            f"–ê–¥–º–∏–Ω-–≥—Ä—É–ø–ø–∞: [{config.admin_group_url}]({config.admin_group_url})",
            reply_markup=get_channel_keyboard(config.admin_group_url),
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_group: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—ã.")

@router.callback_query(F.data == "post_payment")
async def post_payment(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤—ã–ø–ª–∞—Ç—ã"""
    try:
        if not await is_admin(callback.from_user.id):
            await callback.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return
            
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")
        await state.set_state(PaymentForm.manager_name)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ post_payment: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–æ—Ä–º—ã –≤—ã–ø–ª–∞—Ç—ã.")

@router.message(PaymentForm.manager_name)
async def process_manager_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    try:
        manager_name = message.text.strip()
        if len(manager_name) < 2:
            await message.answer("–ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ.")
            return
        await state.update_data(manager_name=manager_name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞ –≤ USDT:")
        await state.set_state(PaymentForm.payment_amount)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_manager_name: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∏–º–µ–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")

@router.message(PaymentForm.payment_amount)
async def process_payment_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            return
        await state.update_data(payment_amount=amount)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (TxID):")
        await state.set_state(PaymentForm.tx_hash)
    except ValueError:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 520.50).")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_payment_amount: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Å—É–º–º—ã.")

@router.message(PaymentForm.tx_hash)
async def process_tx_hash(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö—ç—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞"""
    try:
        config = load_config()
        data = await state.get_data()
        manager_name = data['manager_name']
        payment_amount = data['payment_amount']
        tx_hash = message.text.strip()
        manager_profit = payment_amount * 0.5

        payment_text = (
            f"üë§ –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {manager_name}\n\n"
            f"üí∞ –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –∫–ª–∏–µ–Ω—Ç–∞: {payment_amount} USDT\n"
            f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {manager_profit} USDT\n"
            f"üîó –•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: [{tx_hash}](https://tronscan.org/#/transaction/{tx_hash})"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–ø–ª–∞—Ç–µ –≤ –±–∞–∑—É
        Session = await init_db(config)
        with Session() as session:
            payment = Payment(
                manager_name=manager_name,
                payment_amount=payment_amount,
                manager_profit=manager_profit,
                tx_hash=tx_hash,
                created_at=datetime.utcnow()
            )
            session.add(payment)
            session.commit()

        await message.bot.send_message(config.payment_channel, payment_text, parse_mode="Markdown")
        await message.answer("–í—ã–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_tx_hash: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤—ã–ø–ª–∞—Ç—ã.")
        await state.clear()


@router.callback_query(F.data.startswith("block_user_"))
async def block_user(callback: CallbackQuery):
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if not await is_admin(callback.from_user.id):
            await callback.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return

        user_id = int(callback.data.split("_")[2])
        await update_user_status(user_id, "banned")
        await callback.message.edit_text(f"{callback.message.text}\n\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{callback.from_user.username}")
        await callback.bot.send_message(user_id, "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ block_user: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

# –î–æ–±–∞–≤–∏—Ç—å –≤ admin.py –ø–æ—Å–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏ show_my_workers:

@router.callback_query(F.data == "show_workers")
async def show_workers_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–æ—Ä–∫–µ—Ä–æ–≤ –∞–¥–º–∏–Ω–∞ —á–µ—Ä–µ–∑ callback"""
    try:
        config = load_config()
        
        if callback.from_user.id not in config.admin_ids:
            await callback.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return
        
        Session = await init_db(config)
        with Session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ —ç—Ç–æ–º—É –∞–¥–º–∏–Ω—É
            workers = session.query(User).filter_by(
                assigned_admin=callback.from_user.id,
                status="active"
            ).all()
            
            if not workers:
                await callback.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤.")
                await callback.answer()
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—ã–ø–ª–∞—Ç–∞–º –∑–∞ –Ω–µ–¥–µ–ª—é
            from datetime import datetime, timedelta
            week_ago = datetime.utcnow() - timedelta(days=7)
            
            total_profit = 0
            week_profit = 0
            
            workers_text = f"üë• –í–∞—à–∏ –≤–æ—Ä–∫–µ—Ä—ã ({len(workers)} —á–µ–ª.)\n\n"
            
            for worker in workers:
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏—Ç –≤–æ—Ä–∫–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –≤—ã–ø–ª–∞—Ç
                worker_payments = session.query(func.sum(Payment.manager_profit)).filter(
                    Payment.manager_name == (worker.username or f"User{worker.telegram_id}")
                ).scalar() or 0
                
                week_payments = session.query(func.sum(Payment.manager_profit)).filter(
                    Payment.manager_name == (worker.username or f"User{worker.telegram_id}"),
                    Payment.created_at >= week_ago
                ).scalar() or 0
                
                total_profit += worker_payments
                week_profit += week_payments
                
                workers_text += (
                    f"‚Ä¢ @{worker.username or f'User{worker.telegram_id}'}: "
                    f"{worker_payments}$ (–Ω–µ–¥–µ–ª—è: {week_payments}$)\n"
                )
            
            workers_text = (
                f"üë• –í–∞—à–∏ –≤–æ—Ä–∫–µ—Ä—ã ({len(workers)} —á–µ–ª.)\n\n"
                f"üí∞ –û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {total_profit}$\n"
                f"üìä –ü—Ä–æ—Ñ–∏—Ç –∑–∞ –Ω–µ–¥–µ–ª—é: {week_profit}$\n\n"
                f"üë§ –°–ø–∏—Å–æ–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤:\n" + workers_text.split("üë§ –°–ø–∏—Å–æ–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤:\n")[0] if "üë§ –°–ø–∏—Å–æ–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤:\n" in workers_text else workers_text
            )
        
        await callback.message.answer(workers_text)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_workers_callback: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤.")
